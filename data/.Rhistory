alc_lda_ <- filter(alc_lda, complete.cases(alc_lda) == TRUE)
glimpse(alc_lda)
glimpse(alc_lda_)
glimpse(alc_lda_)
alc_lda
glimpse(alc)
alc <- read.table("/Users/Tuomassoila/IODS-project/data/alc_use_final_assignment.txt", sep = "," , header=TRUE)
colnames(alc)
glimpse(alc)
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(tidyverse)
#producing distributions as barplots for all variables
gather(alc) %>% ggplot(aes(value)) + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust= 1, size = 8)) + facet_wrap("key",scales = "free")
#producing summary statics by grade groups
alc %>% group_by(sex , G3 %>% summarise(count = n()))
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- dplyr::select(two_columns, 1)[1]
}
#Author: Tuomas Soila
#Date 01.03.2017
#Creating the dataset to be analysed in the final assignment. My dataset will be the student alchol consumption.
#readint the data from the source with ; as separator and headers.
#reading the data from data-folder
por <- read.csv("/Users/Tuomassoila/IODS-project/data/student-por.csv", sep = ";" , header=TRUE)
mat <- read.csv("/Users/Tuomassoila/IODS-project/data/student-mat.csv", sep = ";" , header=TRUE)
#printing summaries
str(mat)
str(por)
colnames(mat)
colnames(por)
#choosing the columbs by which the data will be put together
library(dplyr)
join_by <- c("sex","age","address","famsize", "Pstatus","Medu", "Fedu", "Mjob","Fjob","reason", "nursery", "internet")
#creating the new data object mat_por, which includes both data
mat_por <- inner_join(suffix=c(".mat",".por"), mat, por, by = join_by)
#overviewing the data
colnames(mat_por)
glimpse(mat_por)
#removing the duplicates
# create a new data frame with only the joined columns
alc <- dplyr::select(mat_por, one_of(join_by)) #crea<tes a new dataframe
#choosing the columns that were not used for joining
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- dplyr::select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- dplyr::select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- dplyr::select(two_columns, 1)[1]
}
}
glimpse(alc)
library(dplyr); library(ggplot2)
#looking into the dataframe
#saving the data
setwd("IODS-project/data/")
write.table(alc, file = "alc_use_final_assignment.txt", sep = ",", col.names = TRUE)
alc <- read.table("/Users/Tuomassoila/IODS-project/data/alc_use_final_assignment.txt", sep = "," , header=TRUE)
colnames(alc)
glimpse(alc)
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(tidyverse)
#producing distributions as barplots for all variables
gather(alc) %>% ggplot(aes(value)) + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust= 1, size = 8)) + facet_wrap("key",scales = "free")
#producing summary statics by grade groups
gather(alc) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(tidyverse)
#producing distributions as barplots for all variables
gather(alc) %>% ggplot(aes(value)) + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust= 1, size = 8)) + facet_wrap("key",scales = "free")
#producing summary statics by grade groups
alc %>% group_by(sex , G3) %>% summarise(count = n()
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(tidyverse)
#producing distributions as barplots for all variables
gather(alc) %>% ggplot(aes(value)) + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust= 1, size = 8)) + facet_wrap("key",scales = "free")
#producing summary statics by grade groups
alc %>% group_by(sex , G3) %>% summarise(count = n())
alc %>% group_by(sex , G3) %>% summarise(count = n())
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "health", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
#only keeping complete cases
alc_lda_ <- filter(alc_lda, complete.cases(alc_lda) == TRUE)
glimpse(alc_lda_)
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -grades)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
#saving the correct variables from the test data
correct_classes <- test$grades
#removing the grades variable from the test data
test<- dplyr::select(test, -grades)
summary(scaled_alc$health)
#linear discriminant analysis
lda.fit <- lda(grades ~., data = train)
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "health", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -grades)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
#saving the correct variables from the test data
correct_classes <- test$grades
#removing the grades variable from the test data
test<- dplyr::select(test, -grades)
summary(scaled_alc$health)
#linear discriminant analysis
lda.fit <- lda(grades ~., data = train)
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -grades)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
#saving the correct variables from the test data
correct_classes <- test$grades
#removing the grades variable from the test data
test<- dplyr::select(test, -grades)
summary(scaled_alc$health)
#linear discriminant analysis
lda.fit <- lda(grades ~., data = train)
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(tidyverse)
#producing distributions as barplots for all variables
gather(alc) %>% ggplot(aes(value)) + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust= 1, size = 8)) + facet_wrap("key",scales = "free")
#producing summary statics by grade groups
alc %>% group_by(sex , g3) %>% summarise(count = n(), mean_grade = mean(G3) )
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(tidyverse)
#producing distributions as barplots for all variables
gather(alc) %>% ggplot(aes(value)) + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust= 1, size = 8)) + facet_wrap("key",scales = "free")
#producing summary statics by grade groups
alc %>% group_by(sex , G3) %>% summarise(count = n(), mean_grade = mean(G3) )
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -grades)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
#saving the correct variables from the test data
correct_classes <- test$grades
#removing the grades variable from the test data
test<- dplyr::select(test, -grades)
summary(scaled_alc$health)
#linear discriminant analysis
lda.fit <- lda(grades ~., data = train)
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -grades)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
#saving the correct variables from the test data
correct_classes <- test$grades1
#removing the grades variable from the test data
test<- dplyr::select(test, -grades1)
summary(scaled_alc$health)
#linear discriminant analysis
lda.fit <- lda(grades1 ~., data = train)
# print the lda.fit object
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "purple", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
classes <- as.numeric(train$grades)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch =classes)
lda.arrows(lda.fit, myscale = 1)
#now using the model to predict grades
#saving the correct variables from the test data
correct_classes <- test$grades1
#removing the grades variable from the test data
test<- dplyr::select(test, -grades1)
#now using the model to predict grades
#saving the correct variables from the test data
correct_classes <- test$grades1
#removing the grades variable from the test data
test<- dplyr::select(test, -grades1)
###now using the model to predict grades
###saving the correct variables from the test data
##correct_classes <- test$grades1
##
###removing the grades variable from the test data
##test<- dplyr::select(test, -grades1)
##
lda.pre <- predict(lda.fit, newdata = test)
#cross tabulating the results
table(correct = correct_classes, predicted= lda.pred$class)
###now using the model to predict grades
###saving the correct variables from the test data
##correct_classes <- test$grades1
##
###removing the grades variable from the test data
##test<- dplyr::select(test, -grades1)
##
lda.pred <- predict(lda.fit, newdata = test)
#cross tabulating the results
table(correct = correct_classes, predicted= lda.pred$class)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes , predicted = lda.pred$class)
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -grades)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
summary(scaled_alc$health)
#linear discriminant analysis
lda.fit <- lda(grades1 ~., data = train)
# print the lda.fit object
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "purple", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
classes <- as.numeric(train$grades)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch =classes)
lda.arrows(lda.fit, myscale = 1)
#now using the model to predict grades
#saving the correct variables from the test data
correct_classes <- test$grades1
#removing the grades variable from the test data
test<- dplyr::select(test, -grades1)
a.pred <- predict(lda.fit, newdata = test)
#cross tabulating the results
table(correct = correct_classes , predicted = lda.pred$class)
alc %>% group_by(sex , G3) %>% summarise(count = n(),
alc %>% group_by(sex , G3) %>% summarise(count = n())
alc %>% group_by(sex , G3) %>% summarise(count = n())
glimpse(scaled_alc)
library(MASS)
library(dplyr)
#selecting non-nominal variables
keep_columns <- c("absences", "Dalc", "goout", "freetime", "failures", "studytime", "traveltime", "Fedu", "Medu", "age","G3")
alc_lda <- dplyr::select(alc, one_of(keep_columns))
alc_lda
# standardise the variables
scaled_alc <- scale(alc_lda_)
#saving scaled_alc as a dataframe
scaled_alc <- as.data.frame(scaled_alc)
#creating categorical variable grades
is.data.frame((scaled_alc))
#saving the scaled grades rate as scaled_grades
alc$G3
scaled_grades <- scaled_alc$G3
bins <- quantile(scaled_grades)
bins
#creating a quantile vector variable "grades"
#creating a categorical variable grades1
grades1 <- cut(scaled_grades, breaks=bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
grades1
#removing the orginal variable
scaled_alc <- dplyr::select(scaled_alc, -G3)
#adding the new categorical variable
scaled_alc <- data.frame(scaled_alc, grades1)
glimpse(scaled_alc)
#dividing my data to train and test sets :
n <- nrow(scaled_alc)
#choosing 80% of the rows
ind <- sample(n, size = n*0.8)
str(scaled_alc)
#creating the training set
train <- scaled_alc[ind,]
#creating test set
test <- scaled_alc[-ind,]
#linear discriminant analysis
lda.fit <- lda(grades1 ~., data = train)
# print the lda.fit object
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "purple", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
classes <- as.numeric(train$grades)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch =classes)
lda.arrows(lda.fit, myscale = 1)
#now using the model to predict grades
#saving the correct variables from the test data
correct_classes <- test$grades1
#removing the grades variable from the test data
test<- dplyr::select(test, -grades1)
a.pred <- predict(lda.fit, newdata = test)
#cross tabulating the results
table(correct = correct_classes , predicted = lda.pred$class)
