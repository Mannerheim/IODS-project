gather(boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
gather(boston) %>% ggplot(aes(value)) +geom_bar()
gather(Boston) %>% ggplot(aes(value)) +geom_bar()
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
library(tidyr); library(dplyr); library(ggplot2)
# plot matrix of the variables
pairs(Boston)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(Boston) %>% glimpse
# draw a bar plot of each variable
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
gather(Boston) %>% glimpse
gather(Boston) %>% glimpse
library(tidyr); library(dplyr); library(ggplot2)
# plot matrix of the variables
#pairs(Boston)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(Boston) %>% glimpse
# draw a bar plot of each variable
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
glimpse(Boston)
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
cor_matrix
cor_matrix<-cor(Boston) %>% round(digits=2)
# print the correlation matrix
cor_matrix
library(tidyr); library(dplyr); library(ggplot2)
# plot matrix of the variables
glimpse(Boston)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
#gather(Boston) %>% glimpse
# draw a bar plot of each variable
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits=2)
# print the correlation matrix
cor_matrix
# standardise the variables
boston_scaled <- scale(Boston)
# print out the summaries of the sacaled variables
summary(boston_scaled)
#cheching the classes of the boston_scaled object
class(boston_scaled)
#creating a dataframe out of the boston_scaled object
boston_scaled <- ad.data.frame(boston_scaled)
# standardise the variables
boston_scaled <- scale(Boston)
# print out the summaries of the sacaled variables
summary(boston_scaled)
#cheching the classes of the boston_scaled object
class(boston_scaled)
#creating a dataframe out of the boston_scaled object
boston_scaled <- as.data.frame(boston_scaled)
#checking that the transformation worked
is.data.frame(boston_scaled)
#saving the scaled crime rate as scaled_crim
scaled_crim <- boston_scaled$crim
#printing out the summary of scaled crime rate
summary(scaled_crim)
#creating ad quantile vector of crime and then
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
#creating a categorical variable "crime"
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
# taking a look at the new factor crime
table(crime)
bins
#removing the original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
#adding the new categorical value to the data
boston_scaled <- data.frame(boston_scaled, crime)
#checking the number of rows in the dataset
n <- nrow(Boston)
#choosing randomly 80% of the rows
ind <- sample(n, size = n * 0.8)
# creating a training set
train <- boston_scaled[ind,]
#creating the testing set
test <- boston_scaled[-ind,]
#saving the correct classes from the test data
correct_classes <- test$crime
#removing the crime variable from the test data
test <- dplyr::select(test, - crime)
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function( x, myscale = 1, arrow_heads = 0.1, color "green", tex = .75, choices = c(1,2){
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
head <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= mysacle * head[,choices[1]],
y1= myscale * head[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.dit, dimen = 2, col = classes, pch = classes)
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
head <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= mysacle * head[,choices[1]],
y1= myscale * head[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(dla.fit, myscale = 1 )
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
head <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= mysacle * head[,choices[1]],
y1= myscale * head[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
head <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * head[,choices[1]],
y1= myscale * head[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
head <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * head[,choices[1]],
y1= myscale * head[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
head <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
#saving the correct classes from the test data
correct_classes <- test$crime
#removing the crime variable from the test data
test <- dplyr::select(test, - crime)
test <- dplyr::select(test, -crime)
#saving the correct classes from the test data
correct_classes <- test$crime
#removing the crime variable from the test data
test <- dplyr::select(test, -crime)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
#saving the correct classes from the test data
correct_classes <- test$crime
#removing the crime variable from the test data
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
tabble( correct = correct_classes, predicted = lda.pred$class)
table( correct = correct_classes, predicted = lda.pred$class)
table(correct = correct_classes , predicted = lda.pred$class)
table(correct = correct_classes , predicted = lda.pred$class)
#saving the correct classes from the test data
correct_classes <- test$crime
#removing the crime variable from the test data
test <- dplyr::select(test, -crime)
library(MASS)
data("Boston")
# explore the dataset
str(Boston)
summary(Boston)
# plot matrix of the variables
pairs(Boston)
library(tidyr); library(dplyr); library(ggplot2)
# plot matrix of the variables
glimpse(Boston)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
#gather(Boston) %>% glimpse
# draw a bar plot of each variable
gather(Boston) %>% ggplot(aes(value)) +geom_bar()+ facet_wrap("key", scales = "free")
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits=2)
# print the correlation matrix
cor_matrix
# standardise the variables
boston_scaled <- scale(Boston)
# print out the summaries of the sacaled variables
summary(boston_scaled)
#cheching the classes of the boston_scaled object
class(boston_scaled)
#creating a dataframe out of the boston_scaled object
boston_scaled <- as.data.frame(boston_scaled)
#checking that the transformation worked
is.data.frame(boston_scaled)
#saving the scaled crime rate as scaled_crim
scaled_crim <- boston_scaled$crim
#printing out the summary of scaled crime rate
summary(scaled_crim)
#creating ad quantile vector of crime and then
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
#creating a categorical variable "crime"
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
# taking a look at the new factor crime
table(crime)
bins
#removing the original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
#adding the new categorical value to the data
boston_scaled <- data.frame(boston_scaled, crime)
#checking the number of rows in the dataset
n <- nrow(Boston)
#choosing randomly 80% of the rows
ind <- sample(n, size = n * 0.8)
# creating a training set
train <- boston_scaled[ind,]
#creating the testing set
test <- boston_scaled[-ind,]
# Doing the discriminant analysis using the crime as the target and all others as predictors
lda.fit <- lda(crime ~., data = train)
#printing the lda.fit obcjet
lda.fit
#Drawing the lda biplot with arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1= myscale * heads[,choices[1]],
y1= myscale * heads[,choices[2]], col = color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col = color, pos = 3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
#plotting the lda
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1 )
#saving the correct classes from the test data
correct_classes <- test$crime
#removing the crime variable from the test data
test <- dplyr::select(test, -crime)
#predicting classes with the test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulating the results
table(correct = correct_classes , predicted = lda.pred$class)
library(MASS)
data("Boston")
boston_scaled <- scale(Boston)
dist_eu <- dist(boston_scaled)
km <-kmeans(boston_scaled, centers = 15)
km$cluster
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
library(MASS)
data("Boston")
boston_scaled <- scale(Boston)
dist_eu <- dist(boston_scaled)
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
# k-means clustering
km <-kmeans(dist_eu, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
library(MASS)
#accessing the data
data("Boston")
#scaling the data
boston_scaled <- scale(Boston)
#calculating the euclidian distances of the observations.
dist_eu <- dist(boston_scaled)
#adding the max number
k_max <- 15
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
# k-means clustering
km <-kmeans(dist_eu, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
gather(Boston) %>% ggplot(aes(value)) +geom_boxplot()+ facet_wrap("key", scales = "free")
gather(Boston) %>% ggplot(aes(value)) +geom_boxplot()+ ylab(value)
gather(Boston) %>% ggplot(aes(value)) +geom_boxplot()+ ylab("value")
gather(Boston) %>% ggplot(aes(value)) +geom_boxplot()+ , aes(x = "free", y = value ))
gather(Boston) %>% ggplot(aes(x = "free", y = value)) +geom_boxplot()
gather(Boston) %>% ggplot(aes(x = value, y = value)) +geom_boxplot()
gather(Boston) %>% ggplot(aes(x = value, y = "value"free)) +geom_boxplot()
gather(Boston) %>% ggplot(aes(x = value, y = "free")) +geom_boxplot()
gather(Boston) %>% ggplot(aes(x = value, y = value)) +geom_boxplot()
value
gather(Boston) %>% ggplot(aes(x = value)) +geom_boxplot()+ facet_wrap("key", scales = "free")
gather(Boston) %>% ggplot(aes(x = value y = "free")) +geom_boxplot()+ facet_wrap("key", scales = "free")
gather(Boston) %>% ggplot(aes(x = value, y = "free")) +geom_boxplot()+ facet_wrap("key", scales = "free")
gather(Boston) %>% ggplot(aes(x = value, y = value)) +geom_boxplot()+ facet_wrap("key", scales = "free")
# standardise the variables
boston_scaled <- scale(Boston)
# print out the summaries of the sacaled variables
summary(boston_scaled)
#cheching the classes of the boston_scaled object
class(boston_scaled)
#creating a dataframe out of the boston_scaled object
boston_scaled <- as.data.frame(boston_scaled)
#checking that the transformation worked
is.data.frame(boston_scaled)
#saving the scaled crime rate as scaled_crim
scaled_crim <- boston_scaled$crim
#printing out the summary of scaled crime rate
summary(scaled_crim)
#creating ad quantile vector of crime and then
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
#creating a categorical variable "crime"
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low","med_low", "med_high", "high"))
# taking a look at the new factor crime
table(crime)
bins
#removing the original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
#adding the new categorical value to the data
boston_scaled <- data.frame(boston_scaled, crime)
#checking the number of rows in the dataset
n <- nrow(Boston)
#choosing randomly 80% of the rows
ind <- sample(n, size = n * 0.8)
# creating a training set
train <- boston_scaled[ind,]
#creating the testing set
test <- boston_scaled[-ind,]
summary(boston_scaled)
summary(boston_scaled)
summary(Boston)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
source('~/IODS-project/data/Create_human.R', echo=TRUE)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv(http:/s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv(http://http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv(http:/http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv(http:/s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv(http:s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
print hd
hd
hd
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv(http:s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
gii
hd
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
gii
hd
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd
summary(hd)
summary(gi)
summary(gii)
glimpse(gii)
glimpse(hd)
srt(gii)
str(gii)
str(hd)
install.packages(plyr)
install.packages("plyr")
rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="expe_age","Expected.Years.of.Education"= "exp_education","Mean.Years.of.Education" ="mean_education", "Gross.National.Income..GNI..per.Capita"="GNI","GNI.per.Capita.Rank.Minus.HDI.Rank" ="adj_GNI"  ))
hd
str(hd)
str(gii)
library(plyr)
rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="expe_age","Expected.Years.of.Education"= "exp_education","Mean.Years.of.Education" ="mean_education", "Gross.National.Income..GNI..per.Capita"="GNI","GNI.per.Capita.Rank.Minus.HDI.Rank" ="adj_GNI"  ))
rename(gii, c("Maternal.Mortality.Ratio"="deaths_mom", "Percent.Representation.in.Parliament"= "women_parliament", "Population.with.Secondary.Education..Female." = "female_secedcu", "Population.with.Secondary.Education..Male."="male_secedu", "Labour.Force.Participation.Rate..Female." = "female_labor", "Labour.Force.Participation.Rate..Male." = "male_labor"))
str(gii)
str(hd)
rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="expe_age","Expected.Years.of.Education"= "exp_education","Mean.Years.of.Education" ="mean_education", "Gross.National.Income..GNI..per.Capita"="GNI","GNI.per.Capita.Rank.Minus.HDI.Rank" ="adj_GNI"  ))
rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="expe_age","Expected.Years.of.Education"= "exp_education","Mean.Years.of.Education" ="mean_education", "Gross.National.Income..GNI..per.Capita"="GNI","GNI.per.Capita.Rank.Minus.HDI.Rank" ="adj_GNI"  ))
rename(gii, c("Maternal.Mortality.Ratio"="deaths_mom", "Percent.Representation.in.Parliament"= "women_parliament", "Population.with.Secondary.Education..Female." = "female_secedcu", "Population.with.Secondary.Education..Male."="male_secedu", "Labour.Force.Participation.Rate..Female." = "female_labor", "Labour.Force.Participation.Rate..Male." = "male_labor"))
summary(hd)
gii <- mutate(gii, f2m_ratio_edu = (female_secedcu/male_secedu))
hd <- rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="expe_age","Expected.Years.of.Education"= "exp_education","Mean.Years.of.Education" ="mean_education", "Gross.National.Income..GNI..per.Capita"="GNI","GNI.per.Capita.Rank.Minus.HDI.Rank" ="adj_GNI"  ))
gii <- rename(gii, c("Maternal.Mortality.Ratio"="deaths_mom", "Percent.Representation.in.Parliament"= "women_parliament", "Population.with.Secondary.Education..Female." = "female_secedcu", "Population.with.Secondary.Education..Male."="male_secedu", "Labour.Force.Participation.Rate..Female." = "female_labor", "Labour.Force.Participation.Rate..Male." = "male_labor"))
str(hd)
gii <- mutate(gii, f2m_ratio_edu = (female_secedcu/male_secedu))
gii$f2m_ratio_edu
gii <- mutate(gii, f2m_labor = (female_labor/male_labor))
gii$f2m_labor
library(dplyr)
human <- inner_join(suffix = c(".gii",".hd"), gii, hd, b =join_by)
human <- inner_join(suffix = c(".gii",".hd"), gii, hd, b =join_by)
library(dplyr)
# choosing the variables by which the joining will be done.
join_by <- c("Country")
# joingin gii and hd by country
human <- inner_join(suffix = c(".gii",".hd"), gii, hd, b =join_by)
math_por <- inner_join(suffix= c(".gii", ".hd"), math, por, by =join_by)
summary(human)
str(human)
str(hd)
wd
getwd()
setwd("IODS-project/data/")
write.table(alc, file = "human", sep = ",", col.names = TRUE)
write.table(human, file = "human", sep = ",", col.names = TRUE)
write.table(human, file = "human.txt", sep = ",", col.names = TRUE)
